// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(NodeDbContext))]
    [Migration("20230923101816_nodetomigration")]
    partial class nodetomigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("WebApplication1.Models.Node", b =>
                {
                    b.Property<int>("nodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("nodeId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("nodeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("parentNodeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("startdate")
                        .HasColumnType("TEXT");

                    b.HasKey("nodeId");

                    b.HasIndex("nodeId1");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("WebApplication1.Models.Node", b =>
                {
                    b.HasOne("WebApplication1.Models.Node", null)
                        .WithMany("Children")
                        .HasForeignKey("nodeId1");
                });

            modelBuilder.Entity("WebApplication1.Models.Node", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
